#!/usr/bin/env python

from __future__ import print_function
from optparse import OptionParser

from killerbee.scapy_extensions import *
from killerbee.kbutils import *
from zigbee_crypt import *

ZBEE_SEC_ENC_MIC_32 = 0x5  #: ZigBee Seecurity Level id 5; Encrypted, 4 byte MIC

APS_CMD = [
    "Unknown",
    "SKKE 1",
    "SKKE 2",
    "SKKE 3",
    "SKKE 4",
    "Transport Key",
    "Update Device"
]

KEY_TYPE = [
    "Trust Center",
    "Network",
    "Application Master",
    "Aplication Link",
    "Trust Link",
    "High Security Network"
]


def sniffNetworkKey(pkts, key, verbose):
    addrMap = dict()
    keyHash = keyHash = sec_key_hash(key, b'\0')

    for p in pkts:
        if (p.haslayer("ZigbeeNWK")):
            nwk = p.getlayer("ZigbeeNWK")
            if nwk.source is not None and nwk.ext_src is not None:
                if not nwk.source in addrMap and verbose:
                    print("[+] Extended Source: " + ":".join("{:02x}".format(ch) for ch in raw(nwk)[8:16]) + " mapped to " + hex(nwk.source))
                addrMap[nwk.source] = raw(nwk)[8:16]
            if (p.haslayer("ZigbeeSecurityHeader") and p.haslayer("ZigbeeAppDataPayload")):
                sec = p.getlayer("ZigbeeSecurityHeader")
                if sec.key_type < 6:
                    if nwk.source in addrMap:
                        data = raw(p.getlayer("ZigbeeAppDataPayload"))
                        scf = (data[2] & ~ ZBEE_SEC_ENC_MIC_32) | ZBEE_SEC_ENC_MIC_32
                        a = data[0:2] + chr(scf) + data[3:7]
                        c = data[7:-4]
                        mic = data[-4:]
                        nonce = addrMap[nwk.source] + data[3:7] + chr(scf)
                        decrypted, success = decrypt_ccm(keyHash, nonce, mic, c, a)
                        if success:
                            print("[+] Decrypted:")
                            if decrypted[0] < len(APS_CMD):
                                print("    APS Command: {}".format(APS_CMD[decrypted[0]]))
                            if decrypted[1] < len(KEY_TYPE):
                                print("    Key Type: {}".format(KEY_TYPE[decrypted[1]]))
                            print("    Value: " + ":".join("{:02x}".format(ch) for ch in decrypted[2:18]))
                        else:
                            print("[-] Decrypt failed - Wrong Key ???")
                    else:
                        print("[-] There was no ext_src mapping for: {}".format(nwk.source))
                else:
                    print("[-] Unexpected key_type {}".format(sec.key_type))


if __name__ == '__main__':
    # Define the command line options.
    parser = OptionParser(description="zbdsniff: Decode plaintext Zigbee Network key from a " +
        "capture file. Will process libpcap capture files. Original concept: " +
        "jwright@willhackforsushi.com, re-implemented using Scapy by Steve Martin.")
    parser.add_option("-f", "--file", dest="filename", help="PCap file to process", metavar="FILE")
    parser.add_option("-d", "--dir", dest="directory",
                      help="Directory of PCap files to process", metavar="DIR")
    parser.add_option("-k", "--transport-key", dest="transportKey", help="Transport Key for decryption")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                      help="Print detailed status messages to stdout")

    (options, args) = parser.parse_args()

    if (not options.filename and not options.directory):
        print("A packet capture file or directory must be specified")
        sys.exit(1)

    if (not options.transportKey):
        print("A transport key value must be specified")
        sys.exit(1)

    files = []
    if options.filename:
        files.append(options.filename)
    if options.directory:
        files += glob.glob(os.path.join(options.directory, "*.pcap"))

    filecount = 0
    for fname in files:
        print("Processing {}".format(fname))
        if not os.path.exists(str(fname)):
            print("ERROR: Input file \"{}\" does not exist.".format(fname), file=sys.stderr)
            sys.exit(1)

        filecount += 1
        try:
            pkts = kbrdpcap(fname)
        except Exception as e:
            print(e)
            print("ERROR: Input file \"{}\" is not able to be loaded. Is it a PCAP file? Daintree support was removed in KillerBee 2.7.1".format(fname), file=sys.stderr)
            continue
        sniffNetworkKey(pkts, options.transportKey, options.verbose)

    print("[+] Processed {} capture files.".format(filecount))

