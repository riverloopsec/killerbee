import sys
from zigbee_crypt import *

ZBEE_SEC_CONST_BLOCKSIZE = 16

def main(bytes_in):
    print('input: {}'.format(bytes_in.hex()))

    crc_bytes = bytes_in[-2:]
    crc_out = crc16(bytes_in[:-2]).to_bytes(2, 'big')
    if crc_bytes.hex() != crc_out.hex():
        print('CRC does not match input. Adding CRC to input.')
        crc_out = crc16(bytes_in).to_bytes(2, 'big')
        bytes_in.extend(crc_out)
        print('crc: {}'.format(crc_out.hex()))

    print('installation code: {}'.format(bytes_in.hex()))

    hashed_bytes_c = mmo_hash(bytes(bytes_in))
    print('link key: {} ({})'.format(hashed_bytes_c.hex(), len(hashed_bytes_c)))

def crc16(data: bytes, poly=0x8408):
    '''
    CRC-16-CCITT Algorithm
    '''
    data = bytearray(data)
    crc = 0xFFFF
    for b in data:
        cur_byte = 0xFF & b
        for _ in range(0, 8):
            if (crc & 0x0001) ^ (cur_byte & 0x0001):
                crc = (crc >> 1) ^ poly
            else:
                crc >>= 1
            cur_byte >>= 1
    crc = (~crc & 0xFFFF)
    crc = (crc << 8) | ((crc >> 8) & 0xFF)
    
    return crc & 0xFFFF

if __name__ == "__main__":
    args = sys.argv[1:]

    if len(args) > 1:
        print('Usage: python3 {} [input]'.format(sys.argv[0]))
        sys.exit(1)

    hex_in = args[0]
    try:
        bytes_in = bytearray(bytes.fromhex(hex_in))
    except:
        print('Invalid input. Expected hex string. (ex: 012345abcdef)')
        sys.exit(1)

    main(bytes_in)